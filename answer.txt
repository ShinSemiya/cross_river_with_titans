※これは解答用サンプルテキストファイルです。

■兵士が巨人に食べられることなく、右の川岸から左の川岸に渡る順番を書いてください。
・「SSSTTT/」でスタートし、「/SSSTTT」で終了します。
・川を1回渡るごとに1行書き、改行してください。
・兵士が巨人に食べられたり、あるいはちゃんと全員が川を渡りきれなかったりすると不正解となります。
・複数解答ある場合は「解答1」「解答2」とそれぞれの順番の最初に書いてください。
解答1
SSSTTT/
SSST/TT
SSSTT/T
SSS/TTT
SSST/TT
ST/SSTT
SSTT/ST
TT/SSST
TTT/SSS
T/SSSTT
TT/SSST
/SSSTTT
解答2
SSSTTT/
SSST/TT
SSSTT/T
SSS/TTT
SSST/TT
ST/SSTT
SSTT/ST
TT/SSST
TTT/SSS
T/SSSTT
ST/SSTT
/SSSTTT
解答3
SSSTTT/
SSST/TT
ST/SSTT
SSTT/ST
TT/SSST
TTT/SSS
T/SSSTT
TT/SSST
/SSSTTT
解答4
SSSTTT/
SSST/TT
ST/SSTT
SSTT/ST
TT/SSST
TTT/SSS
T/SSSTT
ST/SSTT
/SSSTTT


■あなたが書いたコードの内容や工夫した点について簡潔に書いてください。
1.マス目化
計算量を減らすために巨人と兵士の人数の組み合わせをそれぞれ4 * 4 = 16　通りで考え
右岸の兵士の人数yと巨人の人数xで座標(x,y)としてあらわし
全経路で渡河中に巨人に食べられない組み合わせを探索した
巨人に食べられる組み合わせのマス目に入ったときは探索を中止した
2.組み合わせの絞り込み
計算量を減らすために往復のとき、右岸に渡る人数 >= 左岸に渡る人数に絞り探索した
また、右岸に渡った人がそのまま左岸に戻ってくるケースを除外した
3.メソッドの分割
テストしやすいようにメソッドを分割した

■あなたが書いたRubyのバージョンを書いてください。
ruby 2.0.0p247

■あなたが書いたコードそのものをはりつけてください。
=========プロダクトコード==========================
class Rubicon
  BIG_NUMBER = 100
  attr_reader :max_number, :matrix, :payload, :failed_number, :succeed_number, :succeed_logs

  # numberにより配置される兵士と巨人の数を可変としている
  # この実装ではSoldierとTitanと数は同数しか対応していない
  def initialize(number = 3, payload = 2)
    @max_number = number
    @payload    = payload # ボートに乗れる人数
    @matrix     = set_up_matrix(number)
    @failed_number  = 0 # 試行回数
    @succeed_number = 0 # 成功した組み合わせ
    @succeed_logs   = []
  end

  def battery(s = 0, t = 0, log = '00,')
    to_right({ :log => log,
               :from => { :s => s, :t => t, }})
    print_succeed_log
  end

  def edit_params_to_left(battery_params)
    # 右岸到着時の巨人と兵士の人数の計算
    new_soldiers_number = battery_params[:from][:s] + battery_params[:to][:s]
    new_titans_number   = battery_params[:from][:t] + battery_params[:to][:t]

    return { :log  => overwrite_log({ :log => battery_params[:log],
                                      :soldier => new_soldiers_number, :titan => new_titans_number }),
             :from => { :s => new_soldiers_number, :t => new_titans_number },
             :new_comer => {:s => battery_params[:to][:s], :t => battery_params[:to][:t] } }
  end


  def edit_params_to_right(battery_params)
    # 左岸到着時の巨人と兵士の人数の計算
    new_soldiers_number = battery_params[:from][:s] - battery_params[:to][:s]
    new_titans_number   = battery_params[:from][:t] - battery_params[:to][:t]

    return { :log  => overwrite_log({ :log => battery_params[:log],
                                      :soldier => new_soldiers_number, :titan => new_titans_number }),
             :from => { :s => new_soldiers_number, :t => new_titans_number },
             :new_comer => {:s => battery_params[:to][:s], :t => battery_params[:to][:t] } }
  end

  def to_right(battery_params)
    # 右岸に向かうボートの乗員数は常に２人とする (2..2)なので。ボートがn人乗りなら(n..2)になる
    passengers_number = payload
    # 乗員数内の巨人と兵士の人数の組み合わせを試す
    passengers_number.downto(0) do |titans_passengers_number|
      soldiers_passenger_number = passengers_number - titans_passengers_number
      battery_params[:to]       = { :s => soldiers_passenger_number, :t => titans_passengers_number, }

      if is_ok_to_right?(battery_params) && # この人数は位置にして大丈夫か
          log_check?(battery_params)     && # 無限ループ防止
          landing?(battery_params)
        if cross_all?(battery_params)
          # 全員渡りきったので登録
          record_suceed_log(battery_params)
        else
          battery_params = edit_params_to_left(battery_params)
          to_left(battery_params)
        end
      else
        failed
      end
    end
  end

  def to_left(battery_params)
    1.upto(@payload) do |passengers_number|
      passengers_number.downto(0) do |titans_passengers_number|
        soldiers_passenger_number = passengers_number - titans_passengers_number
        battery_params[:to] = { :s => soldiers_passenger_number, :t => titans_passengers_number }

        if is_ok_to_left?(battery_params) &&
           landing?(battery_params)

          battery_retry(battery_params)
        else
          failed
        end
      end
    end
  end

  def battery_retry(battery_params)
    new_battery_params = edit_params_to_right(battery_params)
    to_right(new_battery_params)
  end

  # さっき船で来た人数と同じ人数がそのまま船で対岸に戻っていかないか？
  # これをしないと無限ループになる
  def landing?(battery_params)
    !(battery_params[:new_comer] &&
      battery_params[:new_comer][:s] == battery_params[:to][:s] &&
      battery_params[:new_comer][:t] == battery_params[:to][:t])
  end

  # 全員が渡れる組み合わせを記録
  def record_suceed_log(battery_params)
    succeed
    @succeed_logs << add_last_log(battery_params)
  end

  # 右岸に着いたときのログの追加
  def add_last_log(battery_params)
    overwrite_log({ :log => battery_params[:log],
                    :soldier => battery_params[:from][:s] + battery_params[:to][:s],
                    :titan => battery_params[:from][:t] + battery_params[:to][:t]})
  end

  def print_succeed_log
    puts "#{try_number}通り試行し、#{succeed_number}通りのパターンがあることを発見しました。"
    number = 1
    succeed_logs.each do |succeed_log|
      print_tracs(number, succeed_log)
      number += 1
    end
  end

  def print_tracs(number, succeed_log)
    puts "解答#{number}"
    succeed_log.split(',').map do |turn_log|
      number = turn_log.split('')
      puts ('S' * (max_number - number[0].to_i) +
          'T' * (max_number - number[1].to_i) +
          '/' +
          'S' * number[0].to_i +
          'T' * number[1].to_i)
    end
  end

  def generate_log(t, s)
    "#{s}#{t},"
  end

  # 無限ループ予防措置
  def log_check?(battery_params)
    return (battery_params[:log].length < BIG_NUMBER)
  end

  # 配置(s, t)にしたとき食べられないか
  def is_ok?(s, t)
    in_range?(t) && in_range?(s) && matrix[s][t] == 1
  end

  def is_ok_to_right?(battery_params)
    is_ok?(battery_params[:from][:s] + battery_params[:to][:s],
           battery_params[:from][:t] + battery_params[:to][:t])
  end

  def is_ok_to_left?(battery_params)
    is_ok?(battery_params[:from][:s] - battery_params[:to][:s],
           battery_params[:from][:t] - battery_params[:to][:t])
  end

  def cross_all?(battery_params)
    (battery_params[:from][:s] + battery_params[:to][:s]) == max_number &&
    (battery_params[:from][:t] + battery_params[:to][:t]) == max_number
  end

  def record_in_right(battery_params)
    overwrite_log({ :soldier => battery_params[:from][:s] + battery_params[:to][:s],
                    :titan   => battery_params[:from][:t] + battery_params[:to][:t],
                    :log     => battery_params[:log] }).split(',')[-1]
  end

  def record_in_left(battery_params)
    overwrite_log({ :soldier => battery_params[:from][:s] - battery_params[:to][:s],
                    :titan   => battery_params[:from][:t] - battery_params[:to][:t],
                    :log     => battery_params[:log] }).split(',')[-1]
  end

  def in_range?(number)
    number >= 0 && number <= max_number
  end

  def overwrite_log(params)
    params[:log] + generate_log(params[:titan], params[:soldier])
  end

  def failed
    @failed_number += 1
  end

  def succeed
    @succeed_number += 1
  end

  def try_number
    failed_number + succeed_number
  end

  # matrix上に人数配置ごとの兵士が食べられるときと食べられないときをプロットする
  # matrix において右岸の兵士と巨人がそれぞれx人とy人だったとき、
  # 座標(x,y) = 1なら兵士は巨人に食べられないので、移動できる
  # 座標(x,y) = 0なら兵士は巨人に食べられるので、移動できない
  def set_up_matrix(matrix_size)
    matrix = []
    0.upto(matrix_size) {|soldiers| matrix << set_up_row(soldiers) }
    matrix
  end

  def set_up_row(soldiers)
    row = []
    0.upto(max_number) {|titans| row << set_up_cell(soldiers, titans) }
    row
  end

  def set_up_cell(soldiers, titans)
    if soldiers == 0          || # 兵士が全員左岸にいる
       soldiers == max_number || # 兵士が全員右岸にいる
       soldiers == titans        # 両岸で兵士と巨人の人数が釣り合っている
      return 1
    end
    0
  end
end

rubicon = Rubicon.new
rubicon.battery(0, 0, "00,")

=========テストコード==========================
#テストはかんたんですが書きました
require 'spec_helper'

describe Rubicon do
  let!(:rubicon){ Rubicon.new(3, 2) }

  describe "#initialize" do
    it "max_number is 3" do
      rubicon.max_number.should == 3
    end

    it "matrix is initialized" do
      rubicon.matrix.should == [[1, 1, 1, 1], [0, 1, 0, 0], [0, 0, 1, 0], [1, 1, 1, 1]]
    end
  end

  describe "#set_up_matrix" do
    let!(:boat_payload){ 1 }

    context "max_number is 5" do
      let!(:max_size)    { 2 }

      it "matrix is initialized" do
        rubicon = Rubicon.new(max_size, boat_payload)
        rubicon.set_up_matrix(max_size).should == [[1, 1, 1], [0, 1, 0], [1, 1, 1]]
      end
    end

    context "max_number is 5" do
      let!(:max_size){ 5 }

      it "matrix is initialized" do
        rubicon = Rubicon.new(max_size, boat_payload)
        rubicon.set_up_matrix(max_size).should == [[1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0],
                                                   [0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 1]]

      end
    end
  end

  describe "#is_ok?" do
    context "soldier is 0" do
      it "return true" do
        rubicon.matrix[0][1].should == 1
        rubicon.is_ok?(0, 1).should be_true
      end
    end

    context "soldiers are max_number" do
      it "return true" do
        rubicon.matrix[3][2].should == 1
        rubicon.is_ok?(3, 2).should be_true
      end
    end

    context "soldier == titan" do
      it "return true" do
        rubicon.is_ok?(1, 1).should be_true
        rubicon.is_ok?(2, 2).should be_true
      end
    end

    context "others" do
      it "return false" do
        rubicon.is_ok?(1, 0).should be_false
      end
    end

    context "out of matrix" do
      it "return false" do
        rubicon.is_ok?(6, 4).should be_false
      end
    end
  end

  describe "#is_ok_to_right?" do
    context "assrot in NG" do
      it "return false" do
        params =
            {   :log  => "",
                :from =>{ :s => 0, :t => 3 },
                :to   =>{ :s => 1, :t => 0 },
            }
        rubicon.is_ok_to_right?(params).should be_false
      end
    end

    context "over range" do
      it "return false" do
        params =
            {   :log  => "",
                :from =>{ :s => 0, :t => 3 },
                :to   =>{ :s => 0, :t => 1 },
            }
        rubicon.is_ok_to_right?(params).should be_false
      end
    end
  end

  describe "#is_ok_to_left?" do
    context "assrot in NG" do
      it "return false" do
        params =
            {   :log  => "",
                :from =>{ :s => 0, :t => 3 },
                :to   =>{ :s => 1, :t => 1 },
            }
        rubicon.is_ok_to_left?(params).should be_false
      end
    end

    context "under range" do
      it "return false" do
        params =
            {   :log  => "",
                :from =>{ :s => 0, :t => 3 },
                :to   =>{ :s => 1, :t => 1 },
            }
        rubicon.is_ok_to_left?(params).should be_false
      end
    end
  end

  describe "#edit_params_to_left" do
    it "return editted_params" do
      params =
          {   :log  => "11,",
              :from => { :s => 1, :t => 1 },
              :to   => { :s => 1, :t => 1 },
          }
      result = rubicon.edit_params_to_left(params)
      result[:log].should  == '11,22,'
      result[:from].should == { :s => 2, :t => 2 }
      result[:to].should   be_nil
    end
  end

  describe "#edit_paramsto_right" do
    it "return editted_params" do
      params =
          {   :log  => "33,",
              :from => { :s => 3, :t => 3,  },
              :to   => { :s => 0, :t => 2 },
          }
      result = rubicon.edit_params_to_right(params)
      result[:log].should  == '33,31,'
      result[:from].should == { :s => 3, :t => 1 }
      result[:to].should   be_nil
    end
  end

  describe "#to_right_coast" do
    it "return editted_params" do
      params =
          {   :log  => "22,",
              :from => { :s => 2, :t => 2 },
          }
      result = rubicon.to_right(params)
    end
  end

  describe "#cross_all?" do
    context "all in right" do
      it "return true" do
        params =
            {   :log  => "22,,11,23,",
                :from => { :s => 3, :t => 2 },
                :to   => { :s => 0, :t => 1 },
            }
        rubicon.cross_all?(params).should be_true
      end
    end

    context "NOT all in right" do
      it "return false" do
        params =
            {   :log  => "22,,11,33,22,",
                :from => { :s => 2, :t => 2 },
                :to   => { :s => 0, :t => 1 },
            }
        rubicon.cross_all?(params).should be_false
      end
    end
  end

  describe "#is_ok_to_right?" do
    context "to OK_cell" do
      it "return true" do
        params =
            {   :log  => "22,,11,20,",
                :from => { :s => 0, :t => 2 },
                :to   => { :s => 0, :t => 1 },
            }
        rubicon.is_ok_to_right?(params).should be_true
      end
    end

    context "to NG_cell" do
      it "return false" do
        params =
            {   :log  => "31,,",
                :from => { :s => 1, :t => 1 },
                :to   => { :s => 0, :t => 1 },
            }
        rubicon.is_ok_to_right?(params).should be_false
      end
    end
  end

  describe "#is_ok_to_left?" do
    context "to OK_cell" do
      it "return true" do
        params =
            {   :log  => "22,,11,20,",
                :from => { :s => 0, :t => 3 },
                :to   => { :s => 0, :t => 1 },
            }
        rubicon.is_ok_to_left?(params).should be_true
      end
    end

    context "to NG_cell" do
      it "return false" do
        params =
            {   :log  => "31,,",
                :from => { :s => 0, :t => 3 },
                :to   => { :s => 1, :t => 0 },
            }
        rubicon.is_ok_to_left?(params).should be_false
      end
    end
  end

  describe "#is_ok?" do
    context "in OK_cell" do
      it "return true" do
        rubicon.is_ok?(3, 0).should be_true
      end
    end

    context "in NG_cell" do
      it "return false" do
        rubicon.is_ok?(1, 2).should be_false
      end
    end
  end

  describe "#battery" do
    before(:all) do
      @rubicon = Rubicon.new(3, 2)
      @rubicon.battery
    end

    it "try number is 55" do
      @rubicon.try_number.should == 55
    end

    it "succeed number is 51" do
      @rubicon.failed_number.should == 51
    end

    it "try number is 55?" do
      @rubicon.succeed_number.should == 4
    end
  end
end

